// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package utils

import (
	"main/src/types"

	mock "github.com/stretchr/testify/mock"
)

// NewMockMongoClient creates a new instance of MockMongoClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMongoClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMongoClient {
	mock := &MockMongoClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMongoClient is an autogenerated mock type for the MongoClient type
type MockMongoClient struct {
	mock.Mock
}

type MockMongoClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMongoClient) EXPECT() *MockMongoClient_Expecter {
	return &MockMongoClient_Expecter{mock: &_m.Mock}
}

// GetStats provides a mock function for the type MockMongoClient
func (_mock *MockMongoClient) GetStats(query string) ([]types.DataPoint, error) {
	ret := _mock.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for GetStats")
	}

	var r0 []types.DataPoint
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]types.DataPoint, error)); ok {
		return returnFunc(query)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []types.DataPoint); ok {
		r0 = returnFunc(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.DataPoint)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(query)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMongoClient_GetStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStats'
type MockMongoClient_GetStats_Call struct {
	*mock.Call
}

// GetStats is a helper method to define mock.On call
//   - query string
func (_e *MockMongoClient_Expecter) GetStats(query interface{}) *MockMongoClient_GetStats_Call {
	return &MockMongoClient_GetStats_Call{Call: _e.mock.On("GetStats", query)}
}

func (_c *MockMongoClient_GetStats_Call) Run(run func(query string)) *MockMongoClient_GetStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMongoClient_GetStats_Call) Return(dataPoints []types.DataPoint, err error) *MockMongoClient_GetStats_Call {
	_c.Call.Return(dataPoints, err)
	return _c
}

func (_c *MockMongoClient_GetStats_Call) RunAndReturn(run func(query string) ([]types.DataPoint, error)) *MockMongoClient_GetStats_Call {
	_c.Call.Return(run)
	return _c
}

// InsertStat provides a mock function for the type MockMongoClient
func (_mock *MockMongoClient) InsertStat(stat types.DataPoint) error {
	ret := _mock.Called(stat)

	if len(ret) == 0 {
		panic("no return value specified for InsertStat")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(types.DataPoint) error); ok {
		r0 = returnFunc(stat)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMongoClient_InsertStat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertStat'
type MockMongoClient_InsertStat_Call struct {
	*mock.Call
}

// InsertStat is a helper method to define mock.On call
//   - stat types.DataPoint
func (_e *MockMongoClient_Expecter) InsertStat(stat interface{}) *MockMongoClient_InsertStat_Call {
	return &MockMongoClient_InsertStat_Call{Call: _e.mock.On("InsertStat", stat)}
}

func (_c *MockMongoClient_InsertStat_Call) Run(run func(stat types.DataPoint)) *MockMongoClient_InsertStat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 types.DataPoint
		if args[0] != nil {
			arg0 = args[0].(types.DataPoint)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMongoClient_InsertStat_Call) Return(err error) *MockMongoClient_InsertStat_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMongoClient_InsertStat_Call) RunAndReturn(run func(stat types.DataPoint) error) *MockMongoClient_InsertStat_Call {
	_c.Call.Return(run)
	return _c
}
